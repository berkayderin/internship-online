generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER // Öğrenci rolü
  ADMIN // Öğretmen/yönetici rolü
}

enum ActivityStatus {
  PENDING // Beklemede olan aktivite
  APPROVED // Onaylanmış aktivite
  REJECTED // Reddedilmiş aktivite
}

enum ApplicationStatus {
  PENDING // Beklemede olan başvuru
  APPROVED // Onaylanmış başvuru
  REJECTED // Reddedilmiş başvuru
}

enum PublicHolidayType {
  NEW_YEAR // Yılbaşı
  RAMADAN // Ramazan Bayramı
  NATIONAL_SOVEREIGNTY // Ulusal Egemenlik ve Çocuk Bayramı
  LABOR_DAY // Emek ve Dayanışma Günü
  COMMEMORATION_YOUTH // Atatürk'ü Anma, Gençlik ve Spor Bayramı
  SACRIFICE // Kurban Bayramı
  DEMOCRACY // Demokrasi ve Milli Birlik Günü
  VICTORY // Zafer Bayramı
  REPUBLIC // Cumhuriyet Bayramı
}

model User {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  email               String          @unique
  passwordHash        String
  firstName           String
  lastName            String
  department          String // Bölüm bilgisi
  role                UserRole        @default(USER) // Kullanıcı rolü (varsayılan: öğrenci)
  internshipStartDate DateTime? // Staj başlangıç tarihi (sadece öğrenciler için)
  internshipEndDate   DateTime? // Staj bitiş tarihi (sadece öğrenciler için)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  dailyActivities     DailyActivity[] // Günlük aktivite kayıtları
  applications        Application[] // Staj başvuruları
}

model InternshipPeriod {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  startDate           DateTime // Başvuru başlangıç tarihi
  endDate             DateTime // Başvuru bitiş tarihi
  internshipStartDate DateTime // Staj başlangıç tarihi
  internshipEndDate   DateTime // Staj bitiş tarihi
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  applications        Application[]
}

model Application {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  companyName          String // Şirket adı
  companyPhone         String // Şirket telefonu
  companyWebsite       String? // Şirket web sitesi (opsiyonel)
  companyEmployeeCount Int // Toplam çalışan sayısı
  companyEngineerCount Int // Mühendis sayısı
  companyAddress       String // Şirket adresi
  internshipStartDate  DateTime
  internshipEndDate    DateTime
  status               ApplicationStatus @default(PENDING) // Başvuru durumu
  feedback             String? // Geri bildirim (opsiyonel)
  userId               String            @db.ObjectId // Başvuru sahibi kullanıcı kimliği
  periodId             String            @db.ObjectId // Staj dönemi kimliği
  user                 User              @relation(fields: [userId], references: [id])
  period               InternshipPeriod  @relation(fields: [periodId], references: [id], onDelete: Cascade)
  workingSaturday      Boolean           @default(false) // Şirketin cumartesi çalışma durumu
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}

model DailyActivity {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  content   String
  status    ActivityStatus @default(PENDING)
  feedback  String? // Geri bildirim (opsiyonel)
  userId    String         @db.ObjectId // Başvuru sahibi kullanıcı kimliği
  adminId   String?        @db.ObjectId // Yönetici kullanıcı kimliği
  user      User           @relation(fields: [userId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model PublicHoliday {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  type      PublicHolidayType
  startDate DateTime
  endDate   DateTime
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}
